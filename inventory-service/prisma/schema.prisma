// This is your Prisma schema file.
// Learn more at: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("INVENTORY_DATABASE_URL")
  directUrl = env("INVENTORY_DIRECT_URL")
  schemas   = ["inventory_service"] // Specific schema for this microservice
}

model Product {
  id           String  @id @default(uuid())
  categoryId   String
  name         String  @db.VarChar(100)
  description  String  @db.VarChar(255)
  sku          String  @db.VarChar(50)
  barcode      String  @db.VarChar(50)
  unitPrice    Decimal
  weightKg     Decimal
  dimensions   String  @db.VarChar(50)
  isFragile    Boolean
  needsCooling Boolean

  category            Category            @relation(fields: [categoryId], references: [id])
  productWarehouses   ProductWarehouse[]
  productSuppliers    ProductSupplier[]

  @@schema("inventory_service")
}

model Category {
  id    String @id @default(uuid())
  name  String @db.VarChar(100)

  products Product[]

  @@schema("inventory_service")
}

model Supplier {
  id       String @id @default(uuid())
  name     String @db.VarChar(100)
  phone    String @db.VarChar(20)
  email    String @db.VarChar(100)

  productSuppliers ProductSupplier[]

  @@schema("inventory_service")
}

model ProductSupplier {
  id         String @id @default(uuid())
  productId  String
  supplierId String

  product  Product  @relation(fields: [productId], references: [id])
  supplier Supplier @relation(fields: [supplierId], references: [id])

  @@schema("inventory_service")
}

model Warehouse {
  id            String  @id @default(uuid())
  name          String  @db.VarChar(100)
  address       String  @db.VarChar(255)
  postalCode    String  @db.VarChar(10)
  latitude      Decimal
  longitude     Decimal
  capacityM2    Decimal
  status        String  @db.VarChar(20)
  managerId     String
  cityId        String

  cityRelation        City               @relation(fields: [cityId], references: [id])
  productWarehouses   ProductWarehouse[]

  @@schema("inventory_service")
}

model ProductWarehouse {
  id              String   @id @default(uuid())
  productId       String
  warehouseId     String
  stockQuantity   Int
  reorderLevel    Int
  lastRestock     DateTime?
  expirationDate  DateTime?
  status          String   @db.VarChar(20)  
  deletedAt     DateTime?  @db.Timestamp(6)  // nullable, fecha de eliminación lógica

  product  Product   @relation(fields: [productId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  ProductWarehouseMovements    ProductWarehouseMovement[]

  @@schema("inventory_service")
}

model City {
  id           String @id @default(uuid())
  stateId      String
  name         String @db.VarChar(100)

  state     State    @relation(fields: [stateId], references: [id])
  warehouses Warehouse[]

  @@schema("inventory_service")
}

model State {
  id     String @id @default(uuid())
  name   String @db.VarChar(100)

  cities City[]

  @@schema("inventory_service")
}

model ProductWarehouseMovement {
  id               String    @id @default(uuid())
  productWarehouseId String   // FK a ProductWarehouse
  movementType     String    @db.VarChar(50)
  quantityMoved    Int
  stockAfter       Int
  timestamp        DateTime  @default(now())
  performedById    String?   // Opcional
  notes            String?   @db.VarChar(255)

  productWarehouse ProductWarehouse @relation(fields: [productWarehouseId], references: [id])

  @@schema("inventory_service")
}
